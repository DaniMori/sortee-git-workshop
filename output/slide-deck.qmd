---
title:       "Version control with git + GitHub for scientific workflows"
date:        2023-06-20
date-format: long
author:      |
  Daniel Morillo, Ph.D.\
  [![](../www/github-logo.png){height="50"}](https://github.com/DaniMori/)&emsp;
  [![](../www/orcid.png){height="50"}](https://orcid.org/0000-0003-3021-3878)
institute:   |
  [![](../www/cibersam.png){height="75"}](https://www.cibersam.es/) &emsp;&emsp;
  [![](../www/ki-logo.jpg){height="85"}](https://ki.se/)
format:
  revealjs:
    slide-number:            false
    fig-cap-location:        bottom
    code-annotations:        hover
    link-external-newwindow: true
    transition:              none
    incremental:             true
    auto-stretch:            true
    self-contained:          true
    theme:                   ../www/extra-styles.scss
    view-distance:           3
    template-partials:
      - ../www/title-slide.html
knitr: true
---

# Setup

<br>

-   **Wi-Fi:** Workshop

<br>

-   **Password:** insu_med20

# git + GitHub: An overview

![](../www/git-github.webp)

::: aside
Taken from [git + GitHub for beginners
I](https://medium.com/cs-note/git-and-github-for-beginners-i-tutorial-263caa01f9c3)
\@ [Medium.com](https://medium.com/)
:::

<!-- Alt image from: https://dev.to/chrisachinga/git-and-github-install-configure-51pa -->

## What is git?

<br>

-   Version control system

<br>

-   "History" of changes

<br>

-   Allows "time-travelling"

<!-- TODO: Include Delorean pic from https://ccn-journal-prod.azurewebsites.net/2021/06/25/back-to-the-future-delorean-says-its-coming-back-and-launches-an-auction/ -->

```{=html}
<!-- ::: aside

*title* by [Attribution](link)

::: -->
```
## What is Github?

<br>

-   Centralized git server

<br>

-   Backup + collaboration

<br>

-   Nice GUI & features on top of VC

## Typical VC setup

![](../www/git-workflow.png){fig-align="center" height="520"}

::: aside
Taken from [Hackolade.com](https://hackolade.com/help/Teamcollaboration.html)
:::

::: notes
-   You have a "local repository"

-   You don't need a "cloud server" to use version control

-   You use a VC server to back-up and collaborate
:::

## git jargon

<br>

-   **Repository ("repo")**: A "project", where all your files live

-   **Remote**: Copy of a repository in Github

-   **Local**: Copy of a repository in your computer

-   **Clone**: To copy a local repository from a remote

## Learn more

<br>

::: nonincremental
0.  [I am a Dropbox User and I Don't Get Git](https://garba.org/posts/2021/git/)
    by [Ernesto Gabarino](https://garba.org/about/me/)

1.  [Git cheat sheet](https://jdsalaro.com/blog/git-cheat-sheet.html) by [Jayson
    Salazar](https://jdsalaro.com/about.html)

2.  [Pro Git, 2nd edition](https://git-scm.com/book/en/v2), by Scott Chacon and
    Ben Straub

3.  ["Become a git master"
    module](https://courses.csail.mit.edu/6.S194/13/lessons/03-git/index.html)
    from the [Open Source Software Project Lab
    course](https://courses.csail.mit.edu/6.S194/13/) \@ [MIT's Computer Science
    & Artificial Intelligence Laboratory](https://www.csail.mit.edu/)
:::

# First steps in GitHub

![](../www/github-mascot.png)

::: aside
Taken from [Analyzing GitHub with the search
API](https://www.perl.com/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/)
\@ [Perl.com](https://www.perl.com/)
:::

## Create a repository (I)

<br>

::: nonincremental
1.  [Sign in](https://github.com/login) to your GitHub account

2.  Go to <https://github.com/DaniMori/barebones-rproj-template>

3.  Click on "Use this template"

4.  Click on "Create a new repository"
:::

::: notes
Depending on your settings you may be required a 2-factor authentication method

The template will add some useful pre-cooked features to the new repository
:::

## Create a repository (and II)

::: nonincremental
5.  Fill in "Repository name" and "Description" with:

    > **Repository name:** my-first-repo\
    > **Description:** My first repository ever in GitHub

    OR

    use ***a project name and description of your choice***

6.  Choose "Private" visibility

7.  Leave "Include all branches" deselected

8.  Click on "Create repository from template"
:::

::: notes
The name must be something short, and representatitve of the project aim

Description must be "short" and direct

-   Public: Anyone can see it, even without signing in to GitHub

-   Private: Only collaborators (we will add them later on)

We only need the current state of the repository (what is in the last "version"
of the main branch)
:::

## Explore your brand new repo {.nonincremental}

::: nonincremental
<br>

-   Check interface elements: tabs, branches, files, "About", "README.md"

<br>

-   Check "Repository structure" section in "README.md"

<br>

-   Discuss folders created automatically
:::

::: notes
Folders try to "mirror" the structure of an R package.

Try to understand what all of them are for.

Consider which ones you may need, and which ones you will want to delete.

Let's not pay much attention to the files, by now (we will see later)

`.gitignore` files in subfolders are intended to "create the folder structure"
(we will see later on what these files are)
:::

## Add collaborators

<br>

::: nonincremental
1.  Click on tab "Settings"

2.  Click on "Collaborators"

3.  Click on "Add people"

4.  Search for each other, or [\@DaniMori](https://github.com/DaniMori)
    <!-- TODO: Add Emma's profile too? -->

5.  Click on a collaborator's profile

6.  Click on "Add \<collaborator\> to this repository"
:::

# First steps in git

![](../www/git-logo.svg){fig-align="center" height="350"}

<br>

::: aside
*Git Logo* by [Jason Long](https://twitter.com/jasonlong) taken from
[Git](https://git-scm.com/downloads/logos); licensed under [CC BY
3.0](https://creativecommons.org/licenses/by/3.0/)
:::

## Clone repository (I)

<br>

::: nonincremental
1.  **In your GitHub repo** click on "Code"

2.  In the "HTTPS" tab, click on the "Copy" button

3.  **In Rstudio** click on "File" -\> "New project..."

4.  Click on "Version Control"

5.  Click on "Git"

6.  In the "New Project Wizard" of Rstudio, paste into "Repository URL:"
:::

## Clone repository (II)

<br>

::: nonincremental
-   Cloud storage folders can produce synchronization conflicts
:::

-   Network units can conflict with the R environment (more about this in a
    while...)

-   **NEVER** clone a repository inside another one

::: fragment
::: callout-tip
Create a local "Workspace" folder in your "Documents" to store all your local
repositories.
:::
:::

::: notes
Avoid using a network unit or cloud storage folder (e.g. Dropbox, OneDrive)

Nesting repositories can give problems
:::

## Clone repository (III)

<br>

::: nonincremental
7.  Choose a local folder in "Create project as subdirectory of:"

8.  Click on "Create Project"

9.  Click on "Sign in with your browser" (\*)

10. Close the browser tab / window
:::

::: aside
\*: You will only be asked once
:::

::: notes
Signing-in: Necessary because the repository is "private"
:::

## Clone repository (and IV) {.smaller}

<br>

Try the following:

::: nonincremental
-   Clone someone else's repo

OR

-   Clone <https://github.com/DaniMori/my-first-repo>
:::

::: fragment
::: callout-important
If you get

``` text
fatal: destination path 'my-first-repo' already exists and is not an empty directory.
```

try a different local folder name
:::
:::

::: notes
-   You are not asked again to authenticate

-   The folder names must not "collapse", but the local folder name does not
    need to be the same as the name of the repository. If you are so unlucky as
    to have a repo with the same name as someone else's, try adding e.g. the
    other user's name as suffix.
:::

## Explore your local repo

-   `.git`: Home of your git repository

-   Folders

::: {.fragment .nonincremental}
-   Files:
    -   `.gitignore`

    -   `README.md` and `README.Rmd`

    -   `LICENSE.md`

    -   `.Rprofile`

    -   `renv.lock`
:::

::: notes
In tab "Files" in Rstudio, or in the Windows explorer

`.git`: Important to not mess with it (in the Windows explorer, note that it is
a hidden folder). If broken, delete and clone again. Manages all the files in
the repository folder and subfolders; this is why we should never create "nested
repositories".
<!-- TODO: "Nested repositories" explanation can go when talking about versioning files and not folders -->

E.g.: Only R code, delete "output", "www/YYYY-mm-dd_Meeting_template.md", etc.

`.gitignore` file will tell "git" that certain files must be "ignored"

`README.md` is the "landing-page documentation" of the project. Consider editing
directly if you want, and deleting `README.Rmd`?

`.Rprofile` only runs a script (we will see later what and why)

`renv.lock` is the "R environment" file
:::

## R environment (I)

<br>

Have you noticed...?

<br>

``` r
# Bootstrapping renv 0.17.3 --------------------------------------------------
* Downloading renv 0.17.3 ... OK (downloaded binary)
* Installing renv 0.17.3 ... Done!
* Successfully installed and loaded renv 0.17.3.
* Project '<path/to/project>' loaded. [renv 0.17.3]
* This project contains a lockfile, but none of the recorded packages are installed.
* Use `renv::restore()` to restore the project library.
```

::: notes
Created by `renv`: `.Rprofile` is run everytime and R session starts

(OPEN `.Rprofile`)

The script `renv/activate.R` is sourced, initializing package `renv`. This
package creates and manages an R environment locally.
:::

## R environment (II)

`renv.lock` file:

```{embed, file="../renv.lock"}
```

## R environment (and II)

Update the environment:

::: nonincremental
1.  Go to the "Packages" tab in Rstudio

<br>

2.  Click on "renv" -\> "Restore library..."

<br>

3.  Click on "Restore"
:::

::: notes
Notice that there is a new "drop down" menu, "renv", in the "Packages" tab.

(AFTER 2:)

Take a time to explore the "RestoreLibrary" window. Make sense of the different
columns.

(AFTER 3:)

The environment has been restored (i.e. packages installed). It "links" the
packages in the repository to a local library folder in my computer. This way,
different repositories can share the same package version.

The link to the library folder can be different. That's why it is not advisable
to clone a repo in a network unit shared across different computers.
:::

## Setting up git {.smaller}

<br>

Before committing...

1.  Go to the "Terminal" tab in Rstudio

::: {.fragment .nonincremental}
2.  Type in:

::: fragment
::: callout-tip
Paste in terminal with `Shift-Insert`.
:::

``` {.bash code-line-numbers="1-2|4-5|7-8"}
# set a user name globally
git config --global user.name "User name"

# set an email address globally
git config --global user.email "email@domain.com"

# check that everything's ok
git config --list --global
```
:::
:::

::: notes
The one and only time that we will open the Terminal. Why doesn't Rstudio
provide GUI functionality for this? I don't know...

Mind the double quotes; type in your name or GitHub user name. This is what will
appear in your repo "history" when you "commit" or create versions

Type in your email (also mind the double quotes)
:::

## Let's make some changes

-   Delete unnecessary folders / files

::: {.nonincremental .fragment}
-   Edit `README.md`:

    -   Change \<repository-name\> by your repo (lines 2 & 113)

    -   Change \<repository-url\> by yours (line 66)

    -   Edit "License" section (lines 8-32)

    -   Edit "description" (line 4)
:::

::: notes
Candidate to delete: www

README file: Information for "visitors" of your repository. Useful if you plan
to make it public at some point.

Repo URL must contain the `.git` suffix!!

License:

-   Change "template" by "project" (line 8)

-   Delete bullet points

-   Convert "citation" to "normal text"
:::

## Viewing changes

<br>

::: nonincremental
-   Click on the "Git" tab in Rstudio

-   What do the different "Status" icons mean?

-   Right click on a "deleted file", then "Revert". What happens?

-   BEWARE of reverting modified files!
:::

::: notes
-   Deleted folders "do not exist". It only considers "deleted files".

-   Deleting an empty folders does not show anything in the Git tab.

-   Deleting a non-empty folder shows one line for each deleted file in the Git
    tab.

-   This is why respositories should NEVER be nested

-   REVERT: Recovers the LAST status of a file from the last point in history.
:::

## Iterating our work

::: nonincremental
-   Click on the "Commit" button in the "Git" tab of Rstudio

-   **NEVER** click on discard chunk (unless you are 100% sure)

-   Select files / chunks / selection

-   Click on "staged / unstaged" to see the changes "ready to commit"

-   Write message in "Commit message" text box

-   Click on "Commit"
:::

::: notes
Why "discard chunk" option...? Rstudio should drop this feature

Watch out with "selection", it does not always work

"Ammend" allows you to "correct" and overwrite a (local) commit
:::

## (More) git jargon

<br>

-   **Revert**: Revert changes to a file from the last commit

-   **Stage**: Mark changes for begin tracked

-   **Commit**: Create a new "point in the history"

-   **Push**: Send local changes to the remote repository

-   **Pull**: Get remote changes to local repository

## But how does git work?

![](../www/git-workflow.png){fig-align="center" height="520"}

::: aside
Taken from [Hackolade.com](https://hackolade.com/help/Teamcollaboration.html)
:::

::: notes
Use the "Post office" metaphor to explain:

-   Stage: Pack products (changes) to send

-   Commit: Check packages (changes) in to the postal service

(You can check in several "packages" and the post officer can pick them up
altogether)

-   Push: Send packages to their destination (changes to the repository)

-   Pull: Receive your packages (fetch changes and merge them)
:::

## DO's and DONT's in git (I)

### DON't

-   Ammend an already pushed commit

-   "Bulk-commit" all your progress

::: fragment
### DO
:::

-   Pull always when beginning to work

-   Commit + Push often

-   Push when you finish

-   Write "meaningful commmit messages"

## DO's and DONT's in git (and II)

Meaningful commit messages...

![](../www/vc-designers.jpg){fig-align="center" height="450"}

## Learn more

## 2-col slide {.smaller}

::: columns
::: {.column width="60%"}
![](../www/image_path.jpg){fig-align="center" height="100%"}
:::

::: {.column width="40%"}
</br>

::: fragment
-   BP1

    -   BP 1.1

    -   BP 1.2
:::

</br>

::: fragment
-   BP2
:::
:::
:::

::: aside
*title* by [Attribution](link)
:::

::: notes
<!-- TODO: Notes -->
:::

## Image with text above

Text above

![](../www/vc-Lucas.jpg){fig-align="center" height="450"}

## Slide with citation

> Citation.\

---[Author \@ website](link)

## Embedded-file, centered

Text above

<br>

::: columns
::: {.column align="center" width="25%"}
:::

::: {.column align="center" width="50%"}
```{embed}
```
:::
:::

::: notes
<!-- TODO: Notes -->
:::

## Subtitles and numbering {.smaller}

### Subtitle 1:

0.  LE1

1.  LE2

2.  LE3

<br>

::: fragment
### Subtitle 2:

-   BP
:::

##  {.center}

::: {#title-slide .center}
### Many thanks!

<br>

### Tack så mycket!

<br>

### ¡Muchas gracias!
:::
