---
title:       "Version control with git + GitHub for scientific workflows"
date:        2024-10-15
date-format: long
author:      |
  <table>
    <tr>
      <td>Daniel Morillo, Ph.D.</td>
      <td>Kevin Bairos-Novak</td>
    </tr>
    <tr>
      <td>
        <center>
          [![](../www/github-logo.png){height="50"}](https://github.com/DaniMori/)&emsp;
          [![](../www/orcid.png){height="50"}](https://orcid.org/0000-0003-3021-3878)
        </center>
      </td>
      <td>
        <center>
          [![](../www/github-logo.png){height="50"}](https://github.com/kevolve/)&emsp;
          [![](../www/orcid.png){height="50"}](https://orcid.org/0000-0002-0152-1452)
        </center>
      </td>
    </tr>
  </table>
institute:   |
  <table>
    <tr>
      <td>
        <left>
          [![](../www/Logo Psicologia.gif){height="75"}](https://www.uned.es/universidad/facultades/psicologia/)
        </left>
      </td>
      <td>
        <right>
          [![](<!--# TODO: UQ Logo -->){height="75"}](<!-- # TODO: UQ URL -->)
        </right>
      </td>
    </tr>
  </table>
format:
  revealjs:
    auto-stretch:            true
    code-annotations:        hover
    code-block-height:       220px
    fig-cap-location:        bottom
    incremental:             true
    link-external-newwindow: true
    multiplex:               true
    self-contained:          true
    slide-number:            false
    theme:                   ../www/extra-styles.scss
    transition:              none
    view-distance:           3
    template-partials:
      - ../www/title-slide.html
knitr: true
---

## Setup

::: nonincremental
#### FOLLOW LOCALLY:

-   <https://bit.ly/gitws-follow>

#### \<SECTION\>: <!-- TODO: Technical assistance procedure -->
:::

::: notes
-   Follow presentation, useful for copy-pasting (tested in Chrome)

-   <!-- TODO: Notes about technical assistance? -->
:::

# git + GitHub: An overview

![](../www/git-github.jpeg){fig-align="center" height="350"}

<br>

::: aside
Taken from [The beginner’s guide to Git &
GitHub](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) \@
[freeCodeCamp](https://www.freecodecamp.org)
:::

## What is git?

<br>

-   Version control system

<br>

-   "History" of changes

<br>

-   Allows "time-travelling"

## What is Github?

<br>

-   Centralized git server

<br>

-   Backup + collaboration

<br>

-   Nice GUI & features on top of VC

## Typical VC setup

![](../www/git-workflow.png){fig-align="center" height="520"}

::: aside
Taken from [Hackolade.com](https://hackolade.com/help/Teamcollaboration.html)
:::

::: notes
-   You have a "local repository"

-   You don't need a "cloud server" to use version control

-   You use a VC server to back-up and collaborate
:::

## git jargon

<br>

-   **Repository ("repo")**: A "project", where all your files live

-   **Remote**: Copy of a repository in Github

-   **Local**: Copy of a repository in your computer

-   **Clone**: To copy a local repository from a remote

# First steps in GitHub

![](../www/github-mascot.png)

::: aside
Taken from [Analyzing GitHub with the search
API](https://www.perl.com/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/)
\@ [Perl.com](https://www.perl.com/)
:::

## Create a repository (I)

<br>

::: nonincremental
1.  [Sign in](https://github.com/login) to your GitHub account

2.  Go to <https://github.com/DaniMori/rproj-template>

3.  Click on "Use this template"

4.  Click on "Create a new repository"
:::

::: notes
Depending on your settings you may be required a 2-factor authentication method

The template will add some useful pre-cooked features to the new repository
:::

## Create a repository (and II)

::: nonincremental
5.  Fill in "Repository name" and "Description" with:

    > **Repository name:** my-first-repo\
    > **Description:** My first repository ever in GitHub

    OR

    use ***a project name and description of your choice***

6.  Choose "Private" visibility

7.  Leave "Include all branches" unselected

8.  Click on "Create repository from template"
:::

::: notes
The name must be something short, and representatitve of the project aim (beware
of whitespaces)

Description must be "short" and direct

-   Public: Anyone can see it, even without signing in to GitHub

-   Private: Only collaborators (we will add them later on)

We only need the current state of the repository (what is in the last "version"
of the main branch)

**Give some time to explore the repository.**

Folders try to "mirror" the structure of an R package.

Consider which ones you may need, and which ones you will want to delete.

Let's not pay much attention to the files, by now (we will see later)

".gitkeep" files in subfolders are intended to "create the folder structure" (we
will see later on what these files are)
:::

# First steps in git

![](../www/git-logo.svg){fig-align="center" height="350"}

<br>

::: aside
*Git Logo* by [Jason Long](https://twitter.com/jasonlong) taken from
[Git](https://git-scm.com/downloads/logos); licensed under [CC BY
3.0](https://creativecommons.org/licenses/by/3.0/)
:::

## Clone repository (I)

<br>

::: nonincremental
1.  **In your GitHub repo** click on the "Code" button

2.  In the "HTTPS" tab, click on the "Copy" button

3.  **In Rstudio** click on "File" -\> "New project..."

4.  Click on "Version Control"

5.  Click on "Git"
:::

::: notes
1: Not the "Code" tab, but the green "Code" button
:::

## Clone repository (and II) {.smaller}

<br>

::: nonincremental
6.  In the "New Project Wizard" of Rstudio, paste into "Repository URL:"

7.  Choose a local folder in "Create project as subdirectory of:"

::: callout-tip
Create a local "Workspace" folder in your "Documents" to store all your local
repositories.
:::

8.  Click on "Create Project"

9.  Click on "Sign in with your browser" (\*)

10. Close the browser tab / window
:::

::: aside
\*: You will only be asked once (by computer)
:::

::: notes
6: Note that Rstudio fills in the folder name for you automatically; you don't
need to create a new folder to "nest" your repository into it, it will create it
automatically. If it already exists and is not empty, it will give you an error
and won't create the repository. In that case, you can input another folder name
of your choice.

7:

Avoid using a network or cloud storage folder (e.g. Dropbox, OneDrive); they can
produce synchronization conflicts

Network units can conflict with the R environment (more about this in a
while...)

**NEVER** clone a repository inside another one

9: Signing-in: Necessary because the repository is "private"
:::

## Explore your local repo

-   ".git": Home of your git repository

-   Folders

::: {.fragment .nonincremental}
-   Files:
    -   ".gitignore"

    -   "README.md" and "README.Rmd"

    -   "LICENSE.md"

    -   ".Rprofile"

    -   "renv.lock"
:::

::: notes
In tab "Files" in Rstudio, or in the Windows explorer

".git": Important to not mess with it (in the Windows explorer, note that it is
a hidden folder). If broken, delete and clone again. Manages all the files in
the repository folder and subfolders; this is why we should never create "nested
repositories".
<!-- TODO: "Nested repositories" explanation can go when talking about versioning files and not folders -->

E.g.: Only R code, delete "output", "www/YYYY-mm-dd_Meeting_template.md", etc.

".gitignore" file will tell "git" that certain files must be "ignored"

"README.md" is the "landing-page documentation" of the project. Consider editing
directly if you want, and deleting "README.Rmd"?

".Rprofile" only runs a script (we will see later what and why)

"renv.lock" is the "R environment" file
:::

## R environment

"renv.lock" file:

```{embed}
#| file:   ../renv.lock
#| block-height: 100
```

::: {.fragment .nonincremental}
Update the environment:

1.  Go to the "Packages" tab in Rstudio
:::

2.  Click on "renv" -\> "Restore library..."

3.  Click on "Restore"

::: notes
Notice {renv} messages in the console. Explain that what it means:
Inizialization of {renv}, a system to make the "environment" (packages &
versions) reproducible.

After the repository is cloned, we have to tell it to "install" all the packages
of the environment.

Notice that there is a new "drop down" menu, "renv", in the "Packages" tab.

(AFTER 3:)

The environment has been restored (i.e. packages installed). This makes the
environment "more reproducible"

Explanation (if necessary): Not completely reproducible, only dependencies from
R packages; other stuff e.g. LaTeX packages, TeX engine... are not versioned by
{renv}.
:::

## Setting up git (\*) {.smaller}

Before starting to use version control...

1.  Go to the "Terminal" tab in Rstudio

::: {.fragment .nonincremental}
2.  Type in:

``` {.bash code-line-numbers="1-2|4-5|7-8|10-11"}
# set a user name globally
git config --global user.name "User name"

# set an email address globally
git config --global user.email "GitHubUser@users.noreply.github.com"

# for Windows users
git config --global core.autocrlf true

# check that everything's ok
git config --list --global
```

::: callout-tip
Paste in terminal with `Shift-Insert`.
:::
:::

::: aside
\*: You will only have to do this once (by computer)
:::

::: notes
The one and only time that we will open the Terminal. Why doesn't Rstudio
provide GUI functionality for this? I don't know...

Mind the double quotes; type in your name or (preferably) GitHub user name. This
is what will appear in your repo "history" when you "commit" or create versions,
e.g.:

`git config --global user.name "DaniMori"`

Type in your email (also mind the double quotes). Better use "User name" at
"users.noreply.github.com" (for obfuscating actual email from public exposure),
e.g.:

git config --global user.email "DaniMori\@users.noreply.github.com"
:::

## Let's make some changes {.smaller}

<br>

-   Delete unnecessary folders

::: {.nonincremental .fragment}
-   Edit "README.Rmd":

    -   Change `<repository-name>` by your repo (lines 12-14)

    -   Change `<username>` by your GitHub user name (lines 16-18)

    -   Edit description in section "Repository" (lines 23-24)

    -   Delete description of unused folders (lines 158-181)
:::

-   Knit "README.md"

::: notes
Delete folders "apps", "doc", "notebooks", "output", and/or "R" (give
flexibility, depending on what they plan to add to their project)

(Note that this results in deleting the file(s) within, not the folder; in this
case, the ".kitkeep" files. git has no notion of folders, only files.)

Do NOT delete: "src", "dat" (both necessary later on, if they use the script and
dataset provided), or "renv".

IMPORTANT!! NEVER delete ".Rprofile", "renv.lock" or the "renv" folder

(NEXT)

We will create a "README" file for our new project. Information for "visitors"
of your repository. Useful if you plan to make it public at some point. **Give
some time to get familiar with it!**

We will edit "README.Rmd" (NOT "README.md"), then knit it to generate our own
"README.md" file that will overwrite the one with the template information.

NOTE: There are other sections that can be personalized (see TODOs throughout).

NOTE: The lines where the "Description of unused folders" is may change when
editing the "repository description" in the previous step.

IMPORTANT: HIGHLIGHT this is *just a text file*; git versions (easily) text
files, and keeps track of the changes. Scripts (and ".R" files in general),
notebooks, and Quarto documents are **also text files** (just characters).

(NEXT)

Press "knit" button to generate "README.md". This overwrites the template's own
"README.md" file, creating one for their own repository.

It has installation instructions and all the necessary information (e.g.,
license file; a brief comment on licensing may be in place here).
:::

# Versioning in git

![](../www/git-lifecycle-states.png){fig-align="center" height="450"}

::: aside
Taken from [Git for Network Engineers Series -- The Basics (Part
I)](https://blogs.cisco.com/learning/git-for-network-engineers-series-the-basics-part-1)
:::

## Viewing changes

<br>

::: nonincremental
-   Click on the "Git" tab in Rstudio

-   What do the different "Status" icons mean?

-   Right click on a "deleted file", then "Revert". What happens?

-   BEWARE of reverting modified files!
:::

::: notes
-   Deleted folders "do not exist". It only considers "deleted files".

-   Deleting an empty folder will not show anything in the Git tab.

-   Deleting a non-empty folder shows one line for each deleted file in the Git
    tab.

-   This is why respositories should NEVER be nested

-   REVERT: Recovers the LAST status of a file from the last point in history.

-   Reverting can be tried with "README.md" (but NOT with "README.Rmd"); then it
    can be knit again.
:::

## Iterating our work

::: nonincremental
1.  Click on the "Commit" button in the "Git" tab of Rstudio

2.  Stage files / chunks / selection of lines

    -   **NEVER** click on discard chunk (unless you are 100% sure)

3.  Click on "staged / unstaged" to see the changes "ready to commit"

4.  Write message in "Commit message" text box

5.  Click on "Commit"
:::

::: notes
2: Why "discard chunk" option...? Rstudio should drop this feature (IMO)

3: Use the `SHIFT` key to select several lines (watch out with "selection", it
does not always work if the computer is slow)

4: When seeing the "staged" changes, notice how the "stage chunk" and "discard
chunk" buttons change to "unstage chunk"

5: Git does not allow "empty commmit messages"
:::

## (More) git jargon

<br>

-   **Stage/add**: Mark changes for begin tracked

<br>

-   **Commit**: Create a new "point in the history"

<br>

-   **Revert**: Revert changes to a file (revert to last commit)

::: notes
If asked about "Ammend" by attendees: It allows you to "correct" and overwrite a
(local) commit (**NOT RECOMMENDED** unless you have some experience)
:::

# The git workflow

![](../www/git-commands.png){fig-align="center" height="520"}

::: aside
*Envisioning git* by [Doug
Mahugh](https://www.dougmahugh.com/envisioning-github/)
:::

::: notes
Use the "Post office" metaphor to explain:

-   Stage: Pack products (changes) to send (you can "pack" several files or
    changes in a single package)

-   Commit: Check packages (changes) in to the postal service (each "commit" is
    a package with several changes)
:::

## (Even more) git jargon (\*)

<br>

::: nonincremental
-   **Push**: Send local changes to the remote repository
:::

<br>

-   **Pull**: Get remote changes\
    (to local repository & workspace)

::: aside
\*: Last one, I promise!
:::

::: notes
-   Push: Send packages to their destination (changes to GitHub)

(You can check in several "packages" and the post officer can pick them up
altogether. They are not "sent" to GitHub until you "push" them.)

-   Pull: Receive your packages (fetch changes and merge them)
:::

## Synchronizing with GitHub

<br>

::: nonincremental
-   Click on "Push"

-   Read response message (from GitHub)

-   Click on "Close"

-   Navigate to your repository main page to see the changes online
:::

::: {.nonincremental .fragment}
-   Click on "Pull" in the "Git" tab in Rstudio

-   Read response message (from GitHub)
:::

::: notes
-   After committing (once or several times), one must "Push" the changes to the
    repository. Also, at the end of a session it is best practice to "Push", so
    that we have a backup of the whole commit history in the cloud (i.e. GitHub)

-   Show how the repository now has a nice, personalized main page where the
    "README.md" file has all the instructions for visitors to clone their
    repository and understand what is its purpose.

(NEXT)

-   In this case, the local repository is in sync with the remote, so it will
    not make any new change.
:::

## DOs and DON'Ts in git {.smaller}

<br>

#### DON'T

-   Be afraid of changes

-   Commit without testing the changes

-   "Bulk-commit" all your progress

-   Ammend an already pushed commit

<br>

::: fragment
#### DO
:::

-   Pull always when beginning to work

-   Write [meaningful commit messages](https://cbea.ms/git-commit/)

-   Commit (+ Push) often

-   Push always when finishing work

::: notes
SHOULD NOT SPEND TOO MUCH TIME ON THIS

-   "Bulk-commit": It's better to "be concious" when creating commits; it will
    pay off in the future.

-   One does not need to "push" every time changes are committed. But it's good
    practice to push at least once in a while, when one is sure of the changes,
    or at least at the end of the working session

(NEXT)

-   Pull when beginning session: It is **good practice** to remember to always
    `pull` at the beginning of a session (e.g., a collaborator of yours, or
    yourself from another computer, may have pushed changes)
:::

# Let's practice!

![](../www/workout.jpg){fig-align="center" height="350"}

<br>

::: aside
*Lifting Double Dumbbells free icon*, taken from
[flaticon.com](https://www.flaticon.com/free-icon/lifting-double-dumbbells_82802)
:::

## Versioning new files (I)

<br>

::: nonincremental
-   Download <https://bit.ly/script-gitws>

OR

-   copy ***a script of you own***

to the "src" folder of your local repository
:::

-   Install necessary packages, then "renv" -\> "Snapshot Library..."

-   Stage and commit your changes

::: notes
Install packages: The editor warns (in an upper banner) about missing packages
when you open the script, and gives the option to install them.

Snapshot library: The new libraries will be added to the "renv.lock"
:::

## Versioning new files (and II)

<br>

::: nonincremental
-   Download <https://bit.ly/dataset-gitws>

OR

-   copy ***a data file of your own***

to the "dat" folder of your local repository
:::

-   Why doesn't it show up in the "Git" tab?

-   How would you add a file in "dat" to your repository?

::: notes
The "dat" folder is ignored (i.e. any file whose path "starts with" that folder)

The line in ".gitignore" can be commented (with a \# in front) or deleted, the
file staged, and then the line uncommented again.

It can also be done in the terminal (but no need to learn the commands)
:::

## File paths

<br>

::: nonincremental
-   Change the file path in line 13 of "src/Analysis.R" to point to your
    dataset:

``` r
# TODO: Change "<dataset_filename>" by the name of your own dataset, if
#   necessary (e.g., "dat/penguins.csv")
DATASET_PATH <- "dat/<dataset_filename>.csv"
```

-   Notice the "working directory" on top of the "Console" tab
:::

::: {.callout-tip .fragment}
Use ["relative paths"](https://phoenixnap.com/kb/absolute-path-vs-relative-path)
to make your code reproducible across computers
:::

::: notes
Using relative paths:

-   The working directory will always be the base folder for Rstudio projects

NOTE: If asked about the meaning of "\~", explain the "User home". It can be
shown with `normalizePath("~", winslash = '/')`

-   Always make paths "relative" to the working directory

-   NEVER use `setwd()` in your scripts
:::

## Making new commits

<br>

-   Make sure your script runs without errors

<br>

-   Commit changes

<br>

-   Maybe push your recent commits?

## Viewing your history

<br>

-   Click on "History" in the "Git" tab

-   What do the different columns mean?

-   See the detailed changes in a file

-   Click on "View file" in a previous commit

-   Recover file / lines if necessary

::: notes
"View file": We can "manually revert" changes in a commit by restoring a
previous version of the file, or "copying" what we want to recover and pasting
it in the current version in our file system.
:::

# Wrapping up

<br>

-   Set up the git client locally

-   Create a repository in GitHub

-   Clone a remote repository locally

-   Track changes

-   Explore history

::: notes
Remember: Setting up the git client only needs to be done once per computer.
:::

## The End {.center}

<br>

::: {#title-slide .center}
### Many thanks!

<br> <br>

### ¡Muchas gracias!
:::

# Bonus tips!

![](../www/no-merge-conflicts.jpg){fig-align="center" height="350"}

<br>

::: aside
Taken from [makeameme.org](https://makeameme.org/meme/git-merge-no)
:::

## What to version {.smaller}

::: nonincremental
#### DO NOT VERSION

1.  Dataset files

2.  Passwords, private keys, and other "secrets"

3.  Binary files

4.  Outcomes & deliverables

#### VERSION

5.  Your own work

6.  Environment ({renv}) files, if necessary

7.  Anything else (𐠒) ***necessary to reproduce*** your outcomes (\*)
:::

::: aside
𐠒: Even exceptions to (3) (and maybe (1)?), but **never** (2).

\*: E.g. the "renv.lock" file, which stores your environment state.
:::

## Become a git roadrunner! {.smaller}

<br>

Save hours of lifetime with shortcuts (\*):

::: nonincremental
-   Open git window with `CTRL + ALT + M`

-   Stage files with `SPACE` and `UP / DOWN`, or pointer

-   Move focus to "Commit message" with `SHIFT + TAB` and/or `TAB`

-   Commit with `CTRL + ENTER`

-   Type `SHIFT + TAB` then `ENTER` to push

-   Close git window with `ALT + F4` or go to Rstudio main window with
    `ALT + TAB`
:::

<br>

::: aside
\* Windows/Linux shortcuts, sorry MAC users :(
:::

## Useful resources {.smaller}

<br>

::: nonincremental
-   [I am a Dropbox User and I Don't Get Git](https://garba.org/posts/2021/git/)
    by [Ernesto Gabarino](https://garba.org/about/me/)

-   [Private emails, now more
    private](https://github.blog/2017-04-11-private-emails-now-more-private/),
    article by [Lidsey Bieda](https://github.blog/author/lindseyb/) \@ [GitHub
    Blog](https://github.blog/)

-   Make your GitHub account more secure: [Adding a new SSH key to your GitHub
    account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)

-   [git Commands](https://cloudstudio.com.au/2021/06/26/git-command/) by
    [Richard Zhao](https://cloudstudio.com.au/about/)

-   [Git cheat sheet](https://jdsalaro.com/blog/git-cheat-sheet.html) by [Jayson
    Salazar](https://jdsalaro.com/about.html)

-   [How do git branches
    work?](https://www.howtogeek.com/devops/how-do-git-branches-work/) by
    [Anthony Heddings](https://www.howtogeek.com/author/anthonyheddings/) \@
    [How-To Geek](https://www.howtogeek.com/)

-   ["Become a git master"
    module](https://courses.csail.mit.edu/6.S194/13/lessons/03-git/index.html)
    from the [Open Source Software Project Lab
    course](https://courses.csail.mit.edu/6.S194/13/) \@ [MIT's Computer Science
    & Artificial Intelligence Laboratory](https://www.csail.mit.edu/)

-   [How to Create a GitHub
    Profile](https://github.com/amarpan/how-to-create-a-github-profile), by
    [Amar Panjwani](https://github.com/amarpan)
:::

## Future steps

<br>

::: nonincremental
-   [GUI Clients](https://git-scm.com/downloads/guis) (my recommendation,
    [SourceTree](https://www.sourcetreeapp.com/))

-   [Using built-in git operations in
    SAS](https://blogs.sas.com/content/sasdummy/2020/11/10/sas-projects-git/)

-   [git integration in
    Stata](https://medium.com/the-stata-guide/stata-and-github-integration-8c87ddf9784a)

-   [Git
    Branching](https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows)

-   [Pro Git, 2nd edition](https://git-scm.com/book/en/v2), by Scott Chacon and
    Ben Straub
:::
